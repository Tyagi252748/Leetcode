class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n = grid.size();
        if(grid[0][0] == 1)return -1;
        if(grid[n - 1][n - 1] == 1)return -1;
        if(n == 1 && n == 1)return 1;
        queue<pair<int, int>> q;
        q.push({0, 0});
        grid[0][0] = 1;
        int delr[8] = {-1, -1, -1, 0, 0, 1, 1, 1};
        int delc[8] = {-1, 0, 1, -1, 1, -1, 0, 1};
        int ans = 1;
        while(!q.empty()){
            int size = q.size();
            while(size--){
                int r = q.front().first;
                int c = q.front().second;
                q.pop();
                for(int i = 0; i < 8; i++){
                    int nr = r + delr[i];
                    int nc = c + delc[i];
                    if(nr >= 0 && nr < n && nc >= 0 && nc < n && grid[nr][nc] == 0){
                        if(nr == n - 1 && nc == n - 1)return ans + 1;;
                        q.push({nr, nc});
                        grid[nr][nc] = 1;
                    }
                }
            }
            ans++;
        }
        return -1;
    }
};