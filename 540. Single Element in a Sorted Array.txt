class Solution {
                                                             
                                                       WITH BEST TIME COMPLEXITY OF O(log n)
public:
    int singleNonDuplicate(vector<int>& nums) {
        int ans = 0;
        int n = nums.size();
        int s = 0;
        int e = nums.size() - 1;
        if(n == 1)return nums[0];
        if(nums[0] != nums[1])return nums[0];
        if(nums[n - 1] != nums[n - 2])return nums[n - 1];
        while(s <= e){
            int mid = s + (e - s)/2;
            if(nums[mid] != nums[mid - 1] && nums[mid] != nums[mid + 1]){
                ans = nums[mid];
                break;
            }else if( (mid % 2 == 0) && (nums[mid] == nums[mid - 1]) 
                  || (mid % 2 == 1) && (nums[mid] == nums[mid + 1])){
                      e = mid - 1;
                  }else{
                      s = mid + 1;
                  }
        }
        return ans;
    }
};


                                                OR   WITH TIME OF O(n)

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int ans = 0;
        for(int i = 0; i < nums.size();i++){
            ans = ans^nums[i];
        }

        return ans;
    }
};