								BEST SOLUTION WITH O(n + m)

class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int i=0;
        int j=grid[0].size()-1;
        int count=0;
        while(i<grid.size()&&j>=0){
            if(grid[i][j]<0){
               count+=(grid.size()-i); // add Negative Count = Total Row - current Row
               j--; //decrease the Column Pointer ( j--)
            }else if(grid[i][j]>=0){
                i++; // increase the Row pointer ( i++ )
            }
        }
        return count;        
    }
};


							SOLUTION WITH O(nlogm)

class Solution {
public:
    int BS(vector<int> &it, int m){
        if(it[m - 1] >= 0)return m;
        int s = 0;
        int e = m - 1;
        int idx = -1;
        while(s <= e){
            int mid = s + (e - s)/2;
            if(it[mid] < 0){
                idx = mid;
                e = mid - 1;
            }else{
                s = mid + 1;
            }
        }
        return idx;
    }
    int countNegatives(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int cnt = 0;
        for(auto it : grid){
            int idx = BS(it, m);
            cout<<idx<<" ";
            cnt += (m - idx);
        }
        return cnt;
    }
};

									SOLUTION WITH O(n*m)

class Solution {
public:
    int countNegatives(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int cnt = 0;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] < 0)cnt++;
            }
        }
        return cnt;
    }
};