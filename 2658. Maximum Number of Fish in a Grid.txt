class Solution {
public:
    int dfs(int i, int j, vector<vector<int>>& vis, vector<vector<int>>& grid, int n, int m){
        if(i < 0 || i >= n || j < 0 || j >= m || vis[i][j] == 1 || grid[i][j] == 0)return 0;
        vis[i][j] = 1;
        int cnt1 = dfs(i + 1, j, vis, grid, n, m);
        int cnt2 = dfs(i - 1, j, vis, grid, n, m);
        int cnt3 = dfs(i, j - 1, vis, grid, n, m);
        int cnt4 = dfs(i, j + 1, vis, grid, n, m);
        return cnt1 + cnt2 + cnt3 + cnt4 + grid[i][j];
    }
    int findMaxFish(vector<vector<int>>& grid) {
        int ans = 0;
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>>vis(n, vector<int>(m, 0));
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(vis[i][j] == 0 && grid[i][j] > 0){
                    int cnt = dfs(i, j, vis, grid, n, m);
                    ans = max(cnt, ans);
                }
            }
        }
        return ans;
    }
};