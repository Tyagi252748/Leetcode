class DisjointSet{
    public:
    vector<int> parent, size;
    DisjointSet(int n){
        parent.resize(n + 1);
        size.resize(n + 1, 1);
        for(int i = 0; i <= n; i++){
            parent[i] = i;
        }
    }
    int findPar(int node){
        if(parent[node] == node)return node;
    
        return parent[node] = findPar(parent[node]);

    }
    void unionbySize(int u, int v){
        int par_u = findPar(u);
        int par_v = findPar(v);
        if(par_u == par_v)return;
        if(size[par_u] < size[par_v]){
            parent[par_u] = par_v;
            size[par_v] += size[par_u];
        }else{
            parent[par_v] = par_u;
            size[par_u] += size[par_v];            
        }
    }
};

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        DisjointSet ds(n);
        
        unordered_map<string, int> mp;
        for(int i = 0; i < n; i++){
            for(int j = 1; j < accounts[i].size(); j++){
                string mail = accounts[i][j];
                if(mp.find(mail) == mp.end()){
                    mp[mail] = i;
                }else{
                    ds.unionbySize(i, mp[mail]);
                }
            }
        }
        
        vector<string> adj[n];
        for(auto it : mp){
            string mail = it.first;
            int node = ds.findPar(it.second);
            adj[node].push_back(mail);
        }
        vector<vector<string>> ans;
        for(int i = 0; i < n; i++){
            if(adj[i].size() == 0)continue;
            vector<string> temp;
            sort(adj[i].begin(), adj[i].end());
            temp.push_back(accounts[i][0]);
            for(auto it : adj[i]){
                temp.push_back(it);
            }
            ans.push_back(temp);
        }
        return ans;
    }
};