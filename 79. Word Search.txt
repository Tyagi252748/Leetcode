class Solution {
public:
    bool DFS(vector<vector<char>>& board, int r, int c, string& word, int idx){
        if(idx == word.length() - 1) return true;
        board[r][c] -= 65;
        if(r > 0 && board[r-1][c] == word[idx+1] && DFS(board, r-1, c, word, idx+1)) return true;
        if(c > 0 && board[r][c-1] == word[idx+1] && DFS(board, r, c-1, word, idx+1)) return true;
        if(r < board.size()-1 && board[r+1][c] == word[idx+1] && DFS(board, r+1, c, word, idx+1)) return true;
        if(c < board[0].size()-1 && board[r][c+1] == word[idx+1] && DFS(board, r, c+1, word, idx+1)) return true;
        board[r][c] += 65;
        return false;
}
    bool exist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<bool>>vis(n, vector<bool>(m, false));
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(board[i][j] == word[0]){
                    if(DFS(board, i, j, word, 0))return true;
                }
            }
        }
        return false;
    }
};