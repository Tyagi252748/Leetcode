                                        time complexity O(n^2)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> ans(2);
        for(int i = 0; i < nums.size() - 1; i++){
            for(int j = i + 1; j < nums.size(); j++){
                if(target == nums[i] + nums[j]){
                    ans[0] = i;
                    ans[1] = j;
                    break;
                }
                
            }
        }
        return ans;
        
    }
};


                                                          OR better solution

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        map<int, int> mp;
        int n = nums.size();
        for(int i = 0; i < n; i++){
            mp[nums[i]] = i;
        }
        vector<int> ans;
        for(int i = 0; i < n; i++){
            int rem = target - nums[i];
            if(mp.find(rem) != mp.end() && mp[rem] != i){
                ans.push_back(i);
                ans.push_back(mp[rem]);
                break;
            }
        }
        return ans; 
    }
};