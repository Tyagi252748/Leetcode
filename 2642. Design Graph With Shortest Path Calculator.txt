class Graph {
public:
    vector<pair<int,int>>adj[101];
    Graph(int n, vector<vector<int>>& edges) {
        int e = edges.size();
        for(int i = 0; i < e; i++){
            int u = edges[i][0];
            int v = edges[i][1];
            int w = edges[i][2];
            adj[u].push_back({v,w});
        }  
    }
    
    void addEdge(vector<int> edge) {
        int u = edge[0];
        int v = edge[1];
        int w = edge[2];
        adj[u].push_back({v,w});
    }
    
    int shortestPath(int node1, int node2) {
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> dist(101);
        for(int i = 0; i < 101; i++){
            dist[i] = 1e9;
        }
        dist[node1] = 0;
        pq.push({0,node1});
        while(!pq.empty()){
            int dis = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            for(auto it : adj[node]){
                int adjNode = it.first;
                int adjWt = it.second;
                
                if(dis + adjWt < dist[adjNode]){
                    dist[adjNode] = dis+adjWt;
                    pq.push({dist[adjNode],adjNode});
                }
            }
        }
        if(dist[node2] == 1e9) return -1;
        return dist[node2];
    }
};