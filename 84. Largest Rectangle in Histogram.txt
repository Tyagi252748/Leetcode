class Solution {
public:
    vector<int> prev(vector<int>& heights){
        int n = heights.size();
        vector<int>ans;
        stack<int> st;
        for(int i = 0; i < n; i++){
            while(st.size() > 0 && heights[i] <= heights[st.top()])st.pop();
            int ele = st.size() == 0 ? -1 : st.top();
            ans.push_back(ele);
            st.push(i);
        }
        return ans;
    }
    vector<int> next(vector<int>& heights){
        int n = heights.size();
        vector<int>ans;
        stack<int> st;
        for(int i = n - 1; i >= 0; i--){
            while(st.size() > 0 && heights[i] <= heights[st.top()])st.pop();
            int ele = st.size() == 0 ? n : st.top();
            ans.push_back(ele);
            st.push(i);
        }
        reverse(ans.begin(), ans.end());
        return ans;
    }
    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        stack<int> st;
        vector<int>next_smaller = next(heights);
        vector<int>prev_smaller = prev(heights);
        int ans = 0;
        for(int i = 0; i < n; i++){
            int curr = (next_smaller[i] - prev_smaller[i] - 1)*heights[i];
            ans = max(ans, curr);
        }
        return ans;
    }
};