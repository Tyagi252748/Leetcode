class Solution {
public:
    bool isPossible(int source, int n, vector<int> &color, vector<vector<int>>& graph){
        color[source] = 0;
        queue<int> q;
        q.push(source);
        while(!q.empty()){
            int node = q.front();
            q.pop();
            for(auto it : graph[node]){
                if(color[it] == -1){
                    color[it] = !color[node];
                    q.push(it);
                }else if(color[it] == color[node])return false;
            }
        }
        return true;
    }
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        vector<int> color(n , -1);
        for(int i = 0; i < n; i++){
            if(color[i] == -1){
                if(isPossible(i, n, color, graph) == false)return false;
            }
        }
        return true;
    }
};