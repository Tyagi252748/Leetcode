class Solution {
public:
    void merge(vector<int> &arr, int low, int mid, int high){
        int n1 = mid - low + 1;
        int n2 = high - mid;
        int a1[n1];
        int a2[n2];
        for(int i = 0; i < n1; i++){
            a1[i] = arr[low + i];
        }
        for(int i = 0; i < n2; i++){
            a2[i] = arr[mid + i + 1];
        }
        int i = 0;
        int j = 0; 
        int k = low;
        while(i < n1 && j < n2){
            if(a1[i] < a2[j]){
                arr[k++] = a1[i++];
            }else{
                arr[k++] = a2[j++];
            }
        }
        while(i < n1){
            arr[k++] = a1[i++];
        }
        while(j < n2){
            arr[k++] = a2[j++];
        }
    }
    void mergeSort(vector<int>& nums, int low, int high){
        if(low < high){
            int mid = low + (high - low)/2;
            mergeSort(nums, low, mid);
            mergeSort(nums, mid + 1, high);
            merge(nums, low, mid, high);
        }
    }
    vector<int> sortArray(vector<int>& nums) {
        int n = nums.size() - 1;
        mergeSort(nums, 0, n);
        return nums;
    }
};