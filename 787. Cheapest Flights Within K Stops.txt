class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<pair<int, int>>adj[n];
        for(auto it : flights){
            adj[it[0]].push_back( {it[1], it[2]} );
        }
        queue<pair<int, pair<int, int>>>q;
        vector<int>dist(n, 1e9);
        dist[src] = 0;
        q.push( {0, {src, 0}} );
        while(!q.empty()){
            int stop = q.front().first;
            int city = q.front().second.first;
            int dis = q.front().second.second;
            q.pop();
            if(stop > k)continue;
            for(auto it : adj[city]){
                int adjcity = it.first;
                int adjdis = it.second;
                if(dis + adjdis < dist[adjcity] && stop <= k){
                    dist[adjcity] = dis + adjdis;
                    q.push( {stop + 1, { adjcity, dist[adjcity]}} );
                }
            }
        }
        if(dist[dst] == 1e9)return -1;
        return dist[dst];
    }
};