class Solution {
public:
TreeNode* helper(int preStart, int inStart, int inEnd, vector<int>&preorder, vector<int>& inorder) {
        
    //base condition
    if (preStart > preorder.size() - 1 || inStart > inEnd)return NULL;
        
    //get the root node with curr preorder element
    TreeNode* root = new TreeNode(preorder[preStart]);
        
    //get inIndex; finding preorder's element's index in inorder
    int inIndex = 0;
        
    for (int i = inStart; i <= inEnd; i++) {
        if(inorder[i] == root->val) {
            inIndex = i; 
        }
    }
    //(next, left of inIndex is the end for left subtree)
    root->left = helper(preStart + 1, inStart, inIndex - 1, preorder, inorder);
    //(prestart + length of left subtree + 1)
    root->right = helper(preStart + inIndex - inStart + 1, inIndex + 1, inEnd,  preorder, inorder);

    return root;
}
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return helper (0, 0, inorder.size() - 1,  preorder, inorder);        
    }
};