class Solution {
public:
    int ans = -1;
    void dfs(int node, vector<int> &edges, vector<int> &vis, unordered_map<int, int> &dist){
        vis[node] = 1;
        int neigh = edges[node];
        if(neigh != -1 && !vis[neigh]){
            dist[neigh] = dist[node] + 1;
            dfs(neigh, edges, vis, dist);
        }else if(neigh != -1 && dist.count(neigh)){
            ans = max(ans, dist[node] - dist[neigh] + 1);
        }
    }
    int longestCycle(vector<int>& edges) {
        int n = edges.size();
        vector<int>vis(n, 0);
        for(int i = 0; i < n; i++){
            if(!vis[i]){
                unordered_map<int, int>dist;
                dist[i] = 1;
                dfs(i, edges, vis, dist);
            }
        }
        return ans;
    }
};